import heapq

G = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
M = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def h(s):
    return sum(abs(i - (v - 1) // 3) + abs(j - (v - 1) % 3)
               for i, r in enumerate(s) for j, v in enumerate(r) if v)

def n(s):
    x, y = [(i, j) for i in range(3) for j in range(3) if s[i][j] == 0][0]
    for dx, dy in M:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            t = [row[:] for row in s]
            t[x][y], t[nx][ny] = t[nx][ny], t[x][y]
            yield t

def astar(s):
    q, seen = [(h(s), 0, s, [])], set()
    while q:
        _, g, c, p = heapq.heappop(q)
        k = tuple(map(tuple, c))
        if c == G:
            return p
        if k in seen:
            continue
        seen.add(k)
        for m in n(c):
            heapq.heappush(q, (g + 1 + h(m), g + 1, m, p + [m]))
    return None

# ðŸ”¹ Get dynamic input
print("Enter the puzzle row by row (use 0 for empty):")
s = [list(map(int, input().split())) for _ in range(3)]

sol = astar(s)

print(f"Solved in {len(sol)} moves." if sol else "No solution.")
