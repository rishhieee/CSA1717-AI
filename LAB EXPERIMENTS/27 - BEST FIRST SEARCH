import heapq

def best_first_search(graph, start, goal, heuristic):
    """
    graph: dict of nodes and their neighbors {node: [(neighbor, cost), ...]}
    start: starting node
    goal: target node
    heuristic: function(node) -> estimated cost to goal
    """

    open_list = []
    heapq.heappush(open_list, (heuristic(start), start))
    came_from = {start: None}
    visited = set()

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            # Reconstruct path
            path = []
            while current:
                path.append(current)
                current = came_from[current]
            return path[::-1]

        visited.add(current)

        for neighbor, cost in graph.get(current, []):
            if neighbor not in visited:
                came_from[neighbor] = current
                heapq.heappush(open_list, (heuristic(neighbor), neighbor))

    return None  # No path found


# Example Usage:

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('D', 2), ('E', 5)],
    'C': [('F', 1)],
    'D': [],
    'E': [('F', 1)],
    'F': []
}

# Heuristic: straight-line estimated distance to goal 'F' (example values)
heuristic_values = {
    'A': 6,
    'B': 4,
    'C': 2,
    'D': 4,
    'E': 1,
    'F': 0
}

heuristic = lambda n: heuristic_values[n]

path = best_first_search(graph, 'A', 'F', heuristic)
print("Path found:", path)
